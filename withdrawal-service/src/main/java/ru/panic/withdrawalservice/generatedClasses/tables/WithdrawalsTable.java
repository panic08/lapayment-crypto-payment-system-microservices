/*
 * This file is generated by jOOQ.
 */
package ru.panic.withdrawalservice.generatedClasses.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.panic.withdrawalservice.generatedClasses.Keys;
import ru.panic.withdrawalservice.generatedClasses.Public;
import ru.panic.withdrawalservice.generatedClasses.tables.records.WithdrawalsTableRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WithdrawalsTable extends TableImpl<WithdrawalsTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.withdrawals_table</code>
     */
    public static final WithdrawalsTable WITHDRAWALS_TABLE = new WithdrawalsTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WithdrawalsTableRecord> getRecordType() {
        return WithdrawalsTableRecord.class;
    }

    /**
     * The column <code>public.withdrawals_table.id</code>.
     */
    public final TableField<WithdrawalsTableRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.withdrawals_table.client_username</code>.
     */
    public final TableField<WithdrawalsTableRecord, String> CLIENT_USERNAME = createField(DSL.name("client_username"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.withdrawals_table.amount</code>.
     */
    public final TableField<WithdrawalsTableRecord, Double> AMOUNT = createField(DSL.name("amount"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.withdrawals_table.currency</code>.
     */
    public final TableField<WithdrawalsTableRecord, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.withdrawals_table.timestamp</code>.
     */
    public final TableField<WithdrawalsTableRecord, Long> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.BIGINT.nullable(false), this, "");

    private WithdrawalsTable(Name alias, Table<WithdrawalsTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private WithdrawalsTable(Name alias, Table<WithdrawalsTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.withdrawals_table</code> table reference
     */
    public WithdrawalsTable(String alias) {
        this(DSL.name(alias), WITHDRAWALS_TABLE);
    }

    /**
     * Create an aliased <code>public.withdrawals_table</code> table reference
     */
    public WithdrawalsTable(Name alias) {
        this(alias, WITHDRAWALS_TABLE);
    }

    /**
     * Create a <code>public.withdrawals_table</code> table reference
     */
    public WithdrawalsTable() {
        this(DSL.name("withdrawals_table"), null);
    }

    public <O extends Record> WithdrawalsTable(Table<O> child, ForeignKey<O, WithdrawalsTableRecord> key) {
        super(child, key, WITHDRAWALS_TABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<WithdrawalsTableRecord, Long> getIdentity() {
        return (Identity<WithdrawalsTableRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WithdrawalsTableRecord> getPrimaryKey() {
        return Keys.WITHDRAWALS_TABLE_PKEY;
    }

    @Override
    public WithdrawalsTable as(String alias) {
        return new WithdrawalsTable(DSL.name(alias), this);
    }

    @Override
    public WithdrawalsTable as(Name alias) {
        return new WithdrawalsTable(alias, this);
    }

    @Override
    public WithdrawalsTable as(Table<?> alias) {
        return new WithdrawalsTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public WithdrawalsTable rename(String name) {
        return new WithdrawalsTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WithdrawalsTable rename(Name name) {
        return new WithdrawalsTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public WithdrawalsTable rename(Table<?> name) {
        return new WithdrawalsTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, Double, String, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super String, ? super Double, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super String, ? super Double, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
