/*
 * This file is generated by jOOQ.
 */
package ru.panic.companyservice.generatedClasses.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.panic.companyservice.generatedClasses.Keys;
import ru.panic.companyservice.generatedClasses.Public;
import ru.panic.companyservice.generatedClasses.tables.records.ClientsTableRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientsTable extends TableImpl<ClientsTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.clients_table</code>
     */
    public static final ClientsTable CLIENTS_TABLE = new ClientsTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientsTableRecord> getRecordType() {
        return ClientsTableRecord.class;
    }

    /**
     * The column <code>public.clients_table.id</code>.
     */
    public final TableField<ClientsTableRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.clients_table.username</code>.
     */
    public final TableField<ClientsTableRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.clients_table.password</code>.
     */
    public final TableField<ClientsTableRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.clients_table.email</code>.
     */
    public final TableField<ClientsTableRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.clients_table.btc_balance</code>.
     */
    public final TableField<ClientsTableRecord, Double> BTC_BALANCE = createField(DSL.name("btc_balance"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.clients_table.eth_balance</code>.
     */
    public final TableField<ClientsTableRecord, Double> ETH_BALANCE = createField(DSL.name("eth_balance"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.clients_table.ltc_balance</code>.
     */
    public final TableField<ClientsTableRecord, Double> LTC_BALANCE = createField(DSL.name("ltc_balance"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.clients_table.trx_balance</code>.
     */
    public final TableField<ClientsTableRecord, Double> TRX_BALANCE = createField(DSL.name("trx_balance"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.clients_table.ton_balance</code>.
     */
    public final TableField<ClientsTableRecord, Double> TON_BALANCE = createField(DSL.name("ton_balance"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.clients_table.matic_balance</code>.
     */
    public final TableField<ClientsTableRecord, Double> MATIC_BALANCE = createField(DSL.name("matic_balance"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.clients_table.xrp_balance</code>.
     */
    public final TableField<ClientsTableRecord, Double> XRP_BALANCE = createField(DSL.name("xrp_balance"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.clients_table.tethererc20_balance</code>.
     */
    public final TableField<ClientsTableRecord, Double> TETHERERC20_BALANCE = createField(DSL.name("tethererc20_balance"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.clients_table.registeredat</code>.
     */
    public final TableField<ClientsTableRecord, Long> REGISTEREDAT = createField(DSL.name("registeredat"), SQLDataType.BIGINT.nullable(false), this, "");

    private ClientsTable(Name alias, Table<ClientsTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClientsTable(Name alias, Table<ClientsTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.clients_table</code> table reference
     */
    public ClientsTable(String alias) {
        this(DSL.name(alias), CLIENTS_TABLE);
    }

    /**
     * Create an aliased <code>public.clients_table</code> table reference
     */
    public ClientsTable(Name alias) {
        this(alias, CLIENTS_TABLE);
    }

    /**
     * Create a <code>public.clients_table</code> table reference
     */
    public ClientsTable() {
        this(DSL.name("clients_table"), null);
    }

    public <O extends Record> ClientsTable(Table<O> child, ForeignKey<O, ClientsTableRecord> key) {
        super(child, key, CLIENTS_TABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ClientsTableRecord, Long> getIdentity() {
        return (Identity<ClientsTableRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ClientsTableRecord> getPrimaryKey() {
        return Keys.CLIENTS_TABLE_PKEY;
    }

    @Override
    public ClientsTable as(String alias) {
        return new ClientsTable(DSL.name(alias), this);
    }

    @Override
    public ClientsTable as(Name alias) {
        return new ClientsTable(alias, this);
    }

    @Override
    public ClientsTable as(Table<?> alias) {
        return new ClientsTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientsTable rename(String name) {
        return new ClientsTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientsTable rename(Name name) {
        return new ClientsTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientsTable rename(Table<?> name) {
        return new ClientsTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, String, String, String, Double, Double, Double, Double, Double, Double, Double, Double, Long> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super Long, ? super String, ? super String, ? super String, ? super Double, ? super Double, ? super Double, ? super Double, ? super Double, ? super Double, ? super Double, ? super Double, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super Long, ? super String, ? super String, ? super String, ? super Double, ? super Double, ? super Double, ? super Double, ? super Double, ? super Double, ? super Double, ? super Double, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
