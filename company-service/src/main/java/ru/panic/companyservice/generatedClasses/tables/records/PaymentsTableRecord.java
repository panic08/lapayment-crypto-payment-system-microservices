/*
 * This file is generated by jOOQ.
 */
package ru.panic.companyservice.generatedClasses.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;

import ru.panic.companyservice.generatedClasses.tables.PaymentsTable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentsTableRecord extends UpdatableRecordImpl<PaymentsTableRecord> implements Record8<Long, String, String, String, Double, String, String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.payments_table.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.payments_table.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.payments_table.wallet_id</code>.
     */
    public void setWalletId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.payments_table.wallet_id</code>.
     */
    public String getWalletId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.payments_table.o</code>.
     */
    public void setO(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.payments_table.o</code>.
     */
    public String getO() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.payments_table.company_name</code>.
     */
    public void setCompanyName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.payments_table.company_name</code>.
     */
    public String getCompanyName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.payments_table.amount</code>.
     */
    public void setAmount(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.payments_table.amount</code>.
     */
    public Double getAmount() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>public.payments_table.currency</code>.
     */
    public void setCurrency(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.payments_table.currency</code>.
     */
    public String getCurrency() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.payments_table.ip_address</code>.
     */
    public void setIpAddress(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.payments_table.ip_address</code>.
     */
    public String getIpAddress() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.payments_table.timestamp</code>.
     */
    public void setTimestamp(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.payments_table.timestamp</code>.
     */
    public Long getTimestamp() {
        return (Long) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, String, Double, String, String, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, String, String, String, Double, String, String, Long> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return PaymentsTable.PAYMENTS_TABLE.ID;
    }

    @Override
    public Field<String> field2() {
        return PaymentsTable.PAYMENTS_TABLE.WALLET_ID;
    }

    @Override
    public Field<String> field3() {
        return PaymentsTable.PAYMENTS_TABLE.O;
    }

    @Override
    public Field<String> field4() {
        return PaymentsTable.PAYMENTS_TABLE.COMPANY_NAME;
    }

    @Override
    public Field<Double> field5() {
        return PaymentsTable.PAYMENTS_TABLE.AMOUNT;
    }

    @Override
    public Field<String> field6() {
        return PaymentsTable.PAYMENTS_TABLE.CURRENCY;
    }

    @Override
    public Field<String> field7() {
        return PaymentsTable.PAYMENTS_TABLE.IP_ADDRESS;
    }

    @Override
    public Field<Long> field8() {
        return PaymentsTable.PAYMENTS_TABLE.TIMESTAMP;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getWalletId();
    }

    @Override
    public String component3() {
        return getO();
    }

    @Override
    public String component4() {
        return getCompanyName();
    }

    @Override
    public Double component5() {
        return getAmount();
    }

    @Override
    public String component6() {
        return getCurrency();
    }

    @Override
    public String component7() {
        return getIpAddress();
    }

    @Override
    public Long component8() {
        return getTimestamp();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getWalletId();
    }

    @Override
    public String value3() {
        return getO();
    }

    @Override
    public String value4() {
        return getCompanyName();
    }

    @Override
    public Double value5() {
        return getAmount();
    }

    @Override
    public String value6() {
        return getCurrency();
    }

    @Override
    public String value7() {
        return getIpAddress();
    }

    @Override
    public Long value8() {
        return getTimestamp();
    }

    @Override
    public PaymentsTableRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public PaymentsTableRecord value2(String value) {
        setWalletId(value);
        return this;
    }

    @Override
    public PaymentsTableRecord value3(String value) {
        setO(value);
        return this;
    }

    @Override
    public PaymentsTableRecord value4(String value) {
        setCompanyName(value);
        return this;
    }

    @Override
    public PaymentsTableRecord value5(Double value) {
        setAmount(value);
        return this;
    }

    @Override
    public PaymentsTableRecord value6(String value) {
        setCurrency(value);
        return this;
    }

    @Override
    public PaymentsTableRecord value7(String value) {
        setIpAddress(value);
        return this;
    }

    @Override
    public PaymentsTableRecord value8(Long value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public PaymentsTableRecord values(Long value1, String value2, String value3, String value4, Double value5, String value6, String value7, Long value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PaymentsTableRecord
     */
    public PaymentsTableRecord() {
        super(PaymentsTable.PAYMENTS_TABLE);
    }

    /**
     * Create a detached, initialised PaymentsTableRecord
     */
    public PaymentsTableRecord(Long id, String walletId, String o, String companyName, Double amount, String currency, String ipAddress, Long timestamp) {
        super(PaymentsTable.PAYMENTS_TABLE);

        setId(id);
        setWalletId(walletId);
        setO(o);
        setCompanyName(companyName);
        setAmount(amount);
        setCurrency(currency);
        setIpAddress(ipAddress);
        setTimestamp(timestamp);
        resetChangedOnNotNull();
    }
}
